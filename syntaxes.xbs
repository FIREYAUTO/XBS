#>
newsyntax
@in:CH
@token:intf
@CH:"function(Stack){
	this.TestNext(Stack,\"Paren\",\"TK_POPEN\");
	this.Move(Stack,2);
	let Interface = {};
	while(!this.IsPreciseToken(Stack.Token,\"Paren\",\"TK_PCLOSE\")){
		if(Stack.Token.Type==\"Identifier\"){
			let Name = Stack.Token.Value;
			this.TestNext(Stack,\"None\",\"TK_COLON\");
			this.Move(Stack,2);
			Interface[Name]=this.ParseExpression(Stack);
		}
		this.Next(Stack);
	}
	this.TypeTestNext(Stack,\"Identifier\");
	this.Next(Stack);
	this.ChunkWrite(Stack,[\"IN_ARRAY\",Interface]);
	this.ChunkWrite(Stack,Stack.Token.Value);
}"
@Interpret:"function(AST,Token){
	let i = this.Parse(AST,Token[3]);
	let inp = document.createElement(\"input\");
	let vn = Token[4];
	inp.type = i.type;
	inp.id = i.id;
	inp.value=i.value;
	if (i.classes){
		for(let v of i.classes){
			inp.classList.add(v);
		}
	}
	if(i.style){
		for(let k in i.style){
			let v = i.style[k];
			inp.style[k]=v;
		}
	}
	if (i.parent){
		i.parent.appendChild(inp);
	}
    if(i.events){
		for(let k in i.events){
			let v = i.events[k];
			inp.addEventListener(k,v);
		}
	}
	this.MakeVariable(AST,vn,inp,undefined,AST.Block);
}"
<#

intf(type:"button",parent:document.body,value:"Test",events:{mousedown=func(){window->alert("Hello!")}}) btn

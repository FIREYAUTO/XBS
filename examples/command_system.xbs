# Settings

const Settings = {
	Prefix<const> = "@",
	Splitter<const> = " ",
	ParameterTypes<const> = {
		String<const> = func(self){
			send tostring(self.Token);
		},
		Integer<const> = func(self){
			send toint(self.Token);
		},
		Float<const> = func(self){
			send tofloat(self.Token);
		},
		Boolean<const> = func(self){
			send ["on","1","true"].includes(self.Token.toLowerCase())?true:false;
		},
		LongString<const> = func(self){
			set String = [];
			while(!self::IsEnd()){
				String.push(self.Token);
				self::Next();
			}
			send String.join(Settings.Splitter);
		},
	},
	Commands<const> = [],
};

# Classes

class Stack {
	private method construct(Arguments:[string]=[]){
		self.Tokens = Arguments;
		self.Position = 0;
		self.Token = Arguments[0];
	}
	method Next(Amount=1){
		self.Position+=Amount;
		self.Token = self.Tokens[self.Position];
		send self.Token;
	}
	method IsEnd()
		send self.Position >= ?self.Tokens;
}

class Command {
	private method construct(Options:object={}){
		self.Names = Options.Names|[];
		self.Description = Options.Description|"";
		self.Call = Options.Call;
		self.Parameters = Options.Parameters|[];
	}
	method Fire(Parameters:[string]=[]){
		set P = self.Parameters;
		set S = new Stack(Parameters);
		set PS = [];
		each P as _,PN {
			if(S::IsEnd())stop;
			PS.push(Settings.ParameterTypes[PN](S));
			S::Next();
		}
		send self.Call(*PS);
	}
}

class CommandResult {
	private method construct(Success:boolean=false,Result)
		self.Success=Success,self.Result=Result;
	method ToString()
		send `{self.Success}, {self.Result}`;
}

# Command System

const CommandSystem = {
	Add<const> = func(Value)
		if(Value isa Command)Settings.Commands.push(Value);,
	Run<const> = func(Text:string){
		const Message = Text.split(Settings.Splitter);
		if(!Message[0].startsWith(Settings.Prefix))send new CommandResult(false,"No Prefix");
		Message[0]=Message[0].substring(?Settings.Prefix,?Message[0]).toLowerCase();
		each Settings.Commands as _,Command
			if(Command.Names.includes(Message[0])){
				set Success=false,Result="";
				Message.shift();
				try {
					Result = Command::Fire(Message);
					Success = true;
				}catch E{
					Result = E;
				}
				send new CommandResult(Success,Result);
			}
	}
}

# Commands

CommandSystem.Add(new Command({
	Names = ["log"],
	Parameters = ["LongString"],
	Description = "Logs the given text to the output",
	Call = func(Text){
		log(Text);
	}
}));

set r = CommandSystem.Run("@log hi there");
if(!r.Success)error(r.Result);

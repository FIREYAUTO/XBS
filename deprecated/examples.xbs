#> Using javascript to interact with XBS <#

set Class = window->eval("class x{constructor(a){document.write(a)}};x");
set Test = new Class with ["Hello, world!"];

#> Return testing <#

func t(){
	for(i=1;10;1){
    	if(i==3){send}
        log(i);
    }
    log("worked");
}
t();

#> Using "new" and "with" with constructors <#

set Banned = ["test"];
set Proxy = new window.Proxy with [{test=false}{
	"get"=func(self n){
    	send self[n];
    };
    "set"=func(self n v){
    	if (table.find(Banned n)){send}
    	self:[n]=v;
    };
}];
Proxy:test=true;
log(Proxy.test)

#> Environment test for load function <#

load("log('Hello, world!')"{
	log=func(x){
    	log(x->split("")->reverse()->join(""))
    }
})();

#> The 3 calling methods <#

set String = "Hello";
set Table = {
	Props={
    	Name="Hello, world!"
    }
	Get=func(self Name){
    	send self.Props[Name];
    }
};
log(String->split("")->reverse()->join("")); #PropCall
log(Table::Get("Name")); #SelfCall
log(env.protectCall(error"hi")); #Call

#> Brain**** written in XBS <#

set Input="";
set Code="++.>+++.<--.";
func Interpret(Code Input){
	set Memory=[];set MemPos=0;set Split=Code->split("");set InPos=0;
    func GetInp(){Memory:[MemPos]=Input->charCodeAt(InPos);InPos+=1}
    func CheckMem(){if(Memory[MemPos]==null){Memory:[MemPos]=0}}
    func IncMem(){CheckMem();Memory:[MemPos]+=1}
    func DeincMem(){CheckMem();Memory:[MemPos]-=1}
    func IncAdd(){MemPos+=1}
    func DeincAdd(){MemPos-=1}
    func LogMem(){log(Memory[MemPos])}
    set Tokens={"+"=IncMem"-"=DeincMem">"=IncAdd"<"=DeincAdd"."=LogMem","=GetInp}
    for (i=0;(?Split)-1;1){
    	set Token=Tokens[Split[i]];
        if(Token){Token()}
    }
}
Interpret(Code;Input);

#> Event Listener test <#

window->addEventListener("keydown"func(e){
	console.log(e.key);
})

#> XMLHttpRequest test <#

set XML = new window.XMLHttpRequest;
XML:onreadystatechange = func(){
	if (XML.readyState==XML.DONE){
    	log(XML.responseText);
    }
}
XML->open("get""https://raw.githubusercontent.com/FIREYAUTO/LUA/main/Public/MessyRegistry.lua"true);
XML->send();

#> Printing everything in the global env <#

foreach(k in env){
   	info(k+": "+type(env[k]))
}

#> Compound assignment testing <#

set x = {
	p=0
}
log(x.p);
x:p+=1;
log(x.p);

#> ReadOnly function <#

func ReadOnly(Props){
	send new window.Proxy with [Props {
    	"get"=func(self Name){
        	send self[Name];
        }
        "set"=func(){t
        	send;
        }
    }];
}

set Test = ReadOnly({Works=true});
log(Test.Works);
Test:Works=false;
log(Test.Works);

#> Interacting with HTML to alert a user-inputted message <#

func CreateElement(Tag Props Append){
	set Element = document->createElement(Tag);
    if (type(Props)=="object"){
    	foreach(k,v Props){
        	Element:[k]=v
        }
    }
    Append->appendChild(Element)
    send Element
}
set Input = CreateElement("input"{
	type="text"
    placeholder="Alert message here"
    value=""
}document.body)
CreateElement("br"null document.body)
set Button = CreateElement("button"{
	innerHTML="Click to alert message"
}document.body)
Button->addEventListener("mousedown"func(){
	window->alert(Input.value)
})

#> Class Testing <#

class Point {
	construct=func(self x y){
    	self:x=x
        self:y=y
    }
    GetDistance=func(self Point){
    	send math.sqrt(((Point.y-self.y)^2)+((Point.x-self.x)^2));
    }
}
set p = new Point with [1 1];
set p2 = new Point with [2 2];
log(p::GetDistance(p2));

#> Class Extend Testing <#

class List extends window.Array {
	construct=func(self a){
    	foreach(k,v a){
        	self:[k]=v
        }
        send object.freeze(self);
    }
}

set L = new List with [3 2 1];
log(L[0]);
L:0=4;
log(L[0]);

#> Class Super Testing <#

class Class1 {
	construct=func(self Name){
    	self:Name = Name
    }
}

class Class2 extends Class1 with super {
	construct=func(self Name Extra){
    	super(Name)
        if (type(Extra)=="object"){
        	foreach(k,v Extra){
        		self:[k]=v
        	}
        }
    }
}

set x = new Class2 with ["Name here"{Works=true}]
log(x.Works)
log(x.Name)

#> PropertyManagerClass <#

class PropertyManagerClass {
	Properties={};
    construct=func(self Props){
    	if (type(Props)=="object"){
        	foreach(k,v Props){
            	self.Properties:[k]=v
            }
        }
    }
    Get=func(self Name){
    	send self.Properties[Name]
    }
}
set PropertyManager = new PropertyManagerClass with [{
	Name="PropertyManagerClass"
}];
log(PropertyManager::Get("Name"));

#> Destructure Testing <#

destruct ["a""b"]{
	default="Invalid"
    a="Hello, world!"
}
log(a)
log(b)

#> Date Testing <#

set p = document->createElement("p");
document.body->appendChild(p);
func setDate(){
	set Date = new window.Date;
	p:innerHTML=Date->toLocaleString();
}
setDate();
window->setInterval(setDate,1000);

#> DeepCopy Testing <#

func GetBase(t){
	set ty = type(t);
    if (ty=="array"){
    	send [];
    } elif (ty=="object"){
    	send {};
    }
}
func DeepCopy(t){
	set nt = GetBase(t);
    foreach(k,v t){
    	set ty = type(v);
        if ((ty=="array")|(ty=="object")){
        	nt:[k]=DeepCopy(v);
        } else {
        	nt:[k]=v;
        }
    }
    send nt;
}
set ar = ["hi";["hi"]];
set clone = DeepCopy(ar);
log(clone[1]);

#> Unset Testing <#

set hi={
	j=true;
}
log(hi.j);
unset hi.j;
log(hi.j);
